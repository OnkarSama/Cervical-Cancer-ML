{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8970652,"sourceType":"datasetVersion","datasetId":5400611},{"sourceId":8970921,"sourceType":"datasetVersion","datasetId":5400786}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#invite people for the Kaggle party\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\nimport random as rd\nimport math\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-31T03:24:30.552606Z","iopub.execute_input":"2024-07-31T03:24:30.553044Z","iopub.status.idle":"2024-07-31T03:24:30.564341Z","shell.execute_reply.started":"2024-07-31T03:24:30.553001Z","shell.execute_reply":"2024-07-31T03:24:30.563122Z"},"trusted":true},"execution_count":3119,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/cervical-cancer-data/risk_factors_cervical_cancer.csv')\ndf_2 = pd.read_csv('/kaggle/input/behaviour-risk/sobar-72.csv')","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.567040Z","iopub.execute_input":"2024-07-31T03:24:30.567996Z","iopub.status.idle":"2024-07-31T03:24:30.592321Z","shell.execute_reply.started":"2024-07-31T03:24:30.567934Z","shell.execute_reply":"2024-07-31T03:24:30.591073Z"},"trusted":true},"execution_count":3120,"outputs":[]},{"cell_type":"code","source":"df.head(900)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.593832Z","iopub.execute_input":"2024-07-31T03:24:30.594307Z","iopub.status.idle":"2024-07-31T03:24:30.624029Z","shell.execute_reply.started":"2024-07-31T03:24:30.594262Z","shell.execute_reply":"2024-07-31T03:24:30.622800Z"},"trusted":true},"execution_count":3121,"outputs":[{"execution_count":3121,"output_type":"execute_result","data":{"text/plain":"     Age Number of sexual partners First sexual intercourse  \\\n0     18                       4.0                     15.0   \n1     15                       1.0                     14.0   \n2     34                       1.0                        ?   \n3     52                       5.0                     16.0   \n4     46                       3.0                     21.0   \n..   ...                       ...                      ...   \n853   34                       3.0                     18.0   \n854   32                       2.0                     19.0   \n855   25                       2.0                     17.0   \n856   33                       2.0                     24.0   \n857   29                       2.0                     20.0   \n\n    Num of pregnancies Smokes Smokes (years) Smokes (packs/year)  \\\n0                  1.0    0.0            0.0                 0.0   \n1                  1.0    0.0            0.0                 0.0   \n2                  1.0    0.0            0.0                 0.0   \n3                  4.0    1.0           37.0                37.0   \n4                  4.0    0.0            0.0                 0.0   \n..                 ...    ...            ...                 ...   \n853                0.0    0.0            0.0                 0.0   \n854                1.0    0.0            0.0                 0.0   \n855                0.0    0.0            0.0                 0.0   \n856                2.0    0.0            0.0                 0.0   \n857                1.0    0.0            0.0                 0.0   \n\n    Hormonal Contraceptives Hormonal Contraceptives (years)  IUD  ...  \\\n0                       0.0                             0.0  0.0  ...   \n1                       0.0                             0.0  0.0  ...   \n2                       0.0                             0.0  0.0  ...   \n3                       1.0                             3.0  0.0  ...   \n4                       1.0                            15.0  0.0  ...   \n..                      ...                             ...  ...  ...   \n853                     0.0                             0.0  0.0  ...   \n854                     1.0                             8.0  0.0  ...   \n855                     1.0                            0.08  0.0  ...   \n856                     1.0                            0.08  0.0  ...   \n857                     1.0                             0.5  0.0  ...   \n\n    STDs: Time since first diagnosis STDs: Time since last diagnosis  \\\n0                                  ?                               ?   \n1                                  ?                               ?   \n2                                  ?                               ?   \n3                                  ?                               ?   \n4                                  ?                               ?   \n..                               ...                             ...   \n853                                ?                               ?   \n854                                ?                               ?   \n855                                ?                               ?   \n856                                ?                               ?   \n857                                ?                               ?   \n\n    Dx:Cancer Dx:CIN Dx:HPV Dx Hinselmann Schiller Citology Biopsy  \n0           0      0      0  0          0        0        0      0  \n1           0      0      0  0          0        0        0      0  \n2           0      0      0  0          0        0        0      0  \n3           1      0      1  0          0        0        0      0  \n4           0      0      0  0          0        0        0      0  \n..        ...    ...    ... ..        ...      ...      ...    ...  \n853         0      0      0  0          0        0        0      0  \n854         0      0      0  0          0        0        0      0  \n855         0      0      0  0          0        0        1      0  \n856         0      0      0  0          0        0        0      0  \n857         0      0      0  0          0        0        0      0  \n\n[858 rows x 36 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Number of sexual partners</th>\n      <th>First sexual intercourse</th>\n      <th>Num of pregnancies</th>\n      <th>Smokes</th>\n      <th>Smokes (years)</th>\n      <th>Smokes (packs/year)</th>\n      <th>Hormonal Contraceptives</th>\n      <th>Hormonal Contraceptives (years)</th>\n      <th>IUD</th>\n      <th>...</th>\n      <th>STDs: Time since first diagnosis</th>\n      <th>STDs: Time since last diagnosis</th>\n      <th>Dx:Cancer</th>\n      <th>Dx:CIN</th>\n      <th>Dx:HPV</th>\n      <th>Dx</th>\n      <th>Hinselmann</th>\n      <th>Schiller</th>\n      <th>Citology</th>\n      <th>Biopsy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18</td>\n      <td>4.0</td>\n      <td>15.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>?</td>\n      <td>?</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15</td>\n      <td>1.0</td>\n      <td>14.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>?</td>\n      <td>?</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>34</td>\n      <td>1.0</td>\n      <td>?</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>?</td>\n      <td>?</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>52</td>\n      <td>5.0</td>\n      <td>16.0</td>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>37.0</td>\n      <td>37.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>?</td>\n      <td>?</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>46</td>\n      <td>3.0</td>\n      <td>21.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>15.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>?</td>\n      <td>?</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>853</th>\n      <td>34</td>\n      <td>3.0</td>\n      <td>18.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>?</td>\n      <td>?</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>854</th>\n      <td>32</td>\n      <td>2.0</td>\n      <td>19.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>8.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>?</td>\n      <td>?</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>855</th>\n      <td>25</td>\n      <td>2.0</td>\n      <td>17.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.08</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>?</td>\n      <td>?</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>856</th>\n      <td>33</td>\n      <td>2.0</td>\n      <td>24.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.08</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>?</td>\n      <td>?</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>857</th>\n      <td>29</td>\n      <td>2.0</td>\n      <td>20.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.5</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>?</td>\n      <td>?</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>858 rows × 36 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df['STDs: Time since first diagnosis'].describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.625582Z","iopub.execute_input":"2024-07-31T03:24:30.625953Z","iopub.status.idle":"2024-07-31T03:24:30.639355Z","shell.execute_reply.started":"2024-07-31T03:24:30.625910Z","shell.execute_reply":"2024-07-31T03:24:30.637953Z"},"trusted":true},"execution_count":3122,"outputs":[{"execution_count":3122,"output_type":"execute_result","data":{"text/plain":"count     858\nunique     19\ntop         ?\nfreq      787\nName: STDs: Time since first diagnosis, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"df['STDs: Time since first diagnosis'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.644309Z","iopub.execute_input":"2024-07-31T03:24:30.644761Z","iopub.status.idle":"2024-07-31T03:24:30.656881Z","shell.execute_reply.started":"2024-07-31T03:24:30.644730Z","shell.execute_reply":"2024-07-31T03:24:30.655660Z"},"trusted":true},"execution_count":3123,"outputs":[{"execution_count":3123,"output_type":"execute_result","data":{"text/plain":"STDs: Time since first diagnosis\n?       787\n1.0      15\n3.0      10\n2.0       9\n4.0       6\n7.0       5\n16.0      4\n5.0       4\n8.0       3\n6.0       3\n19.0      2\n11.0      2\n21.0      2\n10.0      1\n22.0      1\n9.0       1\n12.0      1\n15.0      1\n18.0      1\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df = df.drop(columns=['STDs: Time since first diagnosis','STDs: Time since last diagnosis'])","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.658441Z","iopub.execute_input":"2024-07-31T03:24:30.658793Z","iopub.status.idle":"2024-07-31T03:24:30.668519Z","shell.execute_reply.started":"2024-07-31T03:24:30.658762Z","shell.execute_reply":"2024-07-31T03:24:30.667048Z"},"trusted":true},"execution_count":3124,"outputs":[]},{"cell_type":"code","source":"arr=[]\nfor i in df.itertuples():\n    tup = i\n    for j in tup:\n        if j == '?':\n            arr.append(tup[0])\n            break","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.669833Z","iopub.execute_input":"2024-07-31T03:24:30.670189Z","iopub.status.idle":"2024-07-31T03:24:30.691043Z","shell.execute_reply.started":"2024-07-31T03:24:30.670157Z","shell.execute_reply":"2024-07-31T03:24:30.690005Z"},"trusted":true},"execution_count":3125,"outputs":[]},{"cell_type":"code","source":"index_df = pd.DataFrame(arr, columns=['indices'])\nindex_arr = index_df['indices'].unique().flatten()\n\ndf_cleaned = df.drop(index_arr)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.692324Z","iopub.execute_input":"2024-07-31T03:24:30.692676Z","iopub.status.idle":"2024-07-31T03:24:30.705626Z","shell.execute_reply.started":"2024-07-31T03:24:30.692645Z","shell.execute_reply":"2024-07-31T03:24:30.704376Z"},"trusted":true},"execution_count":3126,"outputs":[]},{"cell_type":"code","source":"df_cleaned.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.706876Z","iopub.execute_input":"2024-07-31T03:24:30.707261Z","iopub.status.idle":"2024-07-31T03:24:30.751585Z","shell.execute_reply.started":"2024-07-31T03:24:30.707192Z","shell.execute_reply":"2024-07-31T03:24:30.750367Z"},"trusted":true},"execution_count":3127,"outputs":[{"execution_count":3127,"output_type":"execute_result","data":{"text/plain":"              Age  STDs: Number of diagnosis   Dx:Cancer      Dx:CIN  \\\ncount  668.000000                 668.000000  668.000000  668.000000   \nmean    27.264970                   0.092814    0.025449    0.004491   \nstd      8.727432                   0.310355    0.157603    0.066915   \nmin     13.000000                   0.000000    0.000000    0.000000   \n25%     21.000000                   0.000000    0.000000    0.000000   \n50%     26.000000                   0.000000    0.000000    0.000000   \n75%     33.000000                   0.000000    0.000000    0.000000   \nmax     84.000000                   3.000000    1.000000    1.000000   \n\n           Dx:HPV          Dx  Hinselmann    Schiller    Citology      Biopsy  \ncount  668.000000  668.000000  668.000000  668.000000  668.000000  668.000000  \nmean     0.023952    0.023952    0.044910    0.094311    0.058383    0.067365  \nstd      0.153015    0.153015    0.207262    0.292480    0.234642    0.250841  \nmin      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000  \n25%      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000  \n50%      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000  \n75%      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000  \nmax      1.000000    1.000000    1.000000    1.000000    1.000000    1.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>STDs: Number of diagnosis</th>\n      <th>Dx:Cancer</th>\n      <th>Dx:CIN</th>\n      <th>Dx:HPV</th>\n      <th>Dx</th>\n      <th>Hinselmann</th>\n      <th>Schiller</th>\n      <th>Citology</th>\n      <th>Biopsy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>668.000000</td>\n      <td>668.000000</td>\n      <td>668.000000</td>\n      <td>668.000000</td>\n      <td>668.000000</td>\n      <td>668.000000</td>\n      <td>668.000000</td>\n      <td>668.000000</td>\n      <td>668.000000</td>\n      <td>668.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>27.264970</td>\n      <td>0.092814</td>\n      <td>0.025449</td>\n      <td>0.004491</td>\n      <td>0.023952</td>\n      <td>0.023952</td>\n      <td>0.044910</td>\n      <td>0.094311</td>\n      <td>0.058383</td>\n      <td>0.067365</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>8.727432</td>\n      <td>0.310355</td>\n      <td>0.157603</td>\n      <td>0.066915</td>\n      <td>0.153015</td>\n      <td>0.153015</td>\n      <td>0.207262</td>\n      <td>0.292480</td>\n      <td>0.234642</td>\n      <td>0.250841</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>13.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>21.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>26.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>33.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>84.000000</td>\n      <td>3.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"arr=[]\nfor i in df_cleaned.itertuples():\n    tup = i\n    for j in tup:\n        if j == '?':\n            print(tup[0])\n            arr.append(tup[0])\n            break","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.753259Z","iopub.execute_input":"2024-07-31T03:24:30.753726Z","iopub.status.idle":"2024-07-31T03:24:30.772949Z","shell.execute_reply.started":"2024-07-31T03:24:30.753682Z","shell.execute_reply":"2024-07-31T03:24:30.771595Z"},"trusted":true},"execution_count":3128,"outputs":[]},{"cell_type":"code","source":"df_cleaned['STDs:HPV'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.778118Z","iopub.execute_input":"2024-07-31T03:24:30.778542Z","iopub.status.idle":"2024-07-31T03:24:30.788383Z","shell.execute_reply.started":"2024-07-31T03:24:30.778509Z","shell.execute_reply":"2024-07-31T03:24:30.787271Z"},"trusted":true},"execution_count":3129,"outputs":[{"execution_count":3129,"output_type":"execute_result","data":{"text/plain":"array(['0.0', '1.0'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"df_cleaned['Num of pregnancies'].describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.789998Z","iopub.execute_input":"2024-07-31T03:24:30.790371Z","iopub.status.idle":"2024-07-31T03:24:30.805115Z","shell.execute_reply.started":"2024-07-31T03:24:30.790337Z","shell.execute_reply":"2024-07-31T03:24:30.803734Z"},"trusted":true},"execution_count":3130,"outputs":[{"execution_count":3130,"output_type":"execute_result","data":{"text/plain":"count     668\nunique     11\ntop       1.0\nfreq      214\nName: Num of pregnancies, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"df_cleaned['Num of pregnancies'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.806898Z","iopub.execute_input":"2024-07-31T03:24:30.807364Z","iopub.status.idle":"2024-07-31T03:24:30.820340Z","shell.execute_reply.started":"2024-07-31T03:24:30.807323Z","shell.execute_reply":"2024-07-31T03:24:30.819053Z"},"trusted":true},"execution_count":3131,"outputs":[{"execution_count":3131,"output_type":"execute_result","data":{"text/plain":"array(['1.0', '4.0', '2.0', '6.0', '3.0', '5.0', '8.0', '7.0', '0.0',\n       '11.0', '10.0'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"# Step 1: Replace '?' with NaN\n# df['Num of pregnancies'].replace('?', 'np.nan', inplace=True)\n\n# # Step 2: Convert the column to numeric, forcing errors to NaN\n# df['Num of pregnancies'] = pd.to_numeric(df['Num of pregnancies'], errors='coerce')\n\n# df['Num of pregnancies'].describe()\n\n# # # Step 3: Calculate the mean, ignoring NaN values\n# mean_value = df['Num of pregnancies'].median()\n\n# print(mean_value)\n\ndf_cleaned['Hormonal Contraceptives'].unique()\n\n# Hormonal Contraceptives","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.821770Z","iopub.execute_input":"2024-07-31T03:24:30.822144Z","iopub.status.idle":"2024-07-31T03:24:30.832390Z","shell.execute_reply.started":"2024-07-31T03:24:30.822114Z","shell.execute_reply":"2024-07-31T03:24:30.831218Z"},"trusted":true},"execution_count":3132,"outputs":[{"execution_count":3132,"output_type":"execute_result","data":{"text/plain":"array(['0.0', '1.0'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"df_cleaned['Hormonal Contraceptives (years)'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.833797Z","iopub.execute_input":"2024-07-31T03:24:30.835287Z","iopub.status.idle":"2024-07-31T03:24:30.851114Z","shell.execute_reply.started":"2024-07-31T03:24:30.835243Z","shell.execute_reply":"2024-07-31T03:24:30.849913Z"},"trusted":true},"execution_count":3133,"outputs":[{"execution_count":3133,"output_type":"execute_result","data":{"text/plain":"array(['0.0', '3.0', '15.0', '2.0', '8.0', '10.0', '5.0', '0.25', '22.0',\n       '19.0', '0.5', '1.0', '9.0', '13.0', '11.0', '7.0', '4.0', '12.0',\n       '16.0', '0.33', '0.16', '0.08', '2.282200521', '0.66', '6.0',\n       '1.5', '0.42', '0.67', '0.58', '0.75', '2.5', '6.5', '0.17',\n       '20.0', '3.5', '0.41', '14.0', '17.0'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"#     feature_cols = ['Age', 'Number of sexual partners', 'First sexual intercourse',\n#        'Num of pregnancies', 'Smokes', 'Smokes (years)', 'Smokes (packs/year)',\n#        'Hormonal Contraceptives', 'Hormonal Contraceptives (years)', 'IUD',\n#        'IUD (years)', 'STDs', 'STDs (number)', 'STDs:condylomatosis',\n#        'STDs:cervical condylomatosis', 'STDs:vaginal condylomatosis',\n#        'STDs:vulvo-perineal condylomatosis', 'STDs:syphilis',\n#        'STDs:pelvic inflammatory disease', 'STDs:genital herpes',\n#        'STDs:molluscum contagiosum', 'STDs:AIDS', 'STDs:HIV',\n#        'STDs:Hepatitis B', 'STDs:HPV', 'STDs: Number of diagnosis',\n#        'Dx:Cancer', 'Dx:CIN', 'Dx:HPV', 'Dx', 'Hinselmann', 'Schiller',\n#        'Citology', 'Biopsy']\n# # Step 2: Calculate the correlation matrix (it will automatically ignore NaN values)\n# corr_matrix = df_cleaned[feature_cols].astype(float).corr()\n\n# # Step 3: Plot the heatmap\n# corr_matrix.style.background_gradient()","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.852514Z","iopub.execute_input":"2024-07-31T03:24:30.852842Z","iopub.status.idle":"2024-07-31T03:24:30.861630Z","shell.execute_reply.started":"2024-07-31T03:24:30.852812Z","shell.execute_reply":"2024-07-31T03:24:30.860324Z"},"trusted":true},"execution_count":3134,"outputs":[]},{"cell_type":"code","source":"df_cleaned[df_cleaned['Dx']==1]","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.863904Z","iopub.execute_input":"2024-07-31T03:24:30.864417Z","iopub.status.idle":"2024-07-31T03:24:30.897868Z","shell.execute_reply.started":"2024-07-31T03:24:30.864371Z","shell.execute_reply":"2024-07-31T03:24:30.896658Z"},"trusted":true},"execution_count":3135,"outputs":[{"execution_count":3135,"output_type":"execute_result","data":{"text/plain":"     Age Number of sexual partners First sexual intercourse  \\\n8     45                       1.0                     20.0   \n188   27                       5.0                     19.0   \n229   27                       3.0                     15.0   \n335   29                       2.0                     18.0   \n432   31                       3.0                     19.0   \n578   19                       1.0                     18.0   \n610   21                       2.0                     18.0   \n655   21                       3.0                     17.0   \n727   31                       2.0                     19.0   \n738   27                       6.0                     17.0   \n763   41                       3.0                     18.0   \n765   25                       5.0                     15.0   \n775   27                       2.0                     14.0   \n797   33                       3.0                     19.0   \n822   36                       3.0                     20.0   \n839   31                       3.0                     19.0   \n\n    Num of pregnancies Smokes Smokes (years) Smokes (packs/year)  \\\n8                  5.0    0.0            0.0                 0.0   \n188                2.0    0.0            0.0                 0.0   \n229                4.0    0.0            0.0                 0.0   \n335                4.0    0.0            0.0                 0.0   \n432                1.0    0.0            0.0                 0.0   \n578                1.0    0.0            0.0                 0.0   \n610                3.0    0.0            0.0                 0.0   \n655                0.0    0.0            0.0                 0.0   \n727                2.0    0.0            0.0                 0.0   \n738                2.0    0.0            0.0                 0.0   \n763                5.0    0.0            0.0                 0.0   \n765                4.0    0.0            0.0                 0.0   \n775                3.0    0.0            0.0                 0.0   \n797                3.0    0.0            0.0                 0.0   \n822                2.0    0.0            0.0                 0.0   \n839                1.0    0.0            0.0                 0.0   \n\n    Hormonal Contraceptives Hormonal Contraceptives (years)  IUD  ...  \\\n8                       0.0                             0.0  0.0  ...   \n188                     1.0                             3.0  0.0  ...   \n229                     1.0                             6.0  0.0  ...   \n335                     0.0                             0.0  0.0  ...   \n432                     0.0                             0.0  1.0  ...   \n578                     1.0                             1.0  0.0  ...   \n610                     0.0                             0.0  1.0  ...   \n655                     0.0                             0.0  0.0  ...   \n727                     1.0                             9.0  0.0  ...   \n738                     0.0                             0.0  0.0  ...   \n763                     1.0                             1.0  1.0  ...   \n765                     1.0                             3.0  0.0  ...   \n775                     1.0                             1.0  0.0  ...   \n797                     1.0                            0.16  1.0  ...   \n822                     1.0                             6.0  0.0  ...   \n839                     1.0                            0.08  1.0  ...   \n\n    STDs:HPV STDs: Number of diagnosis Dx:Cancer Dx:CIN Dx:HPV Dx Hinselmann  \\\n8        0.0                         0         1      0      1  1          0   \n188      0.0                         0         1      0      1  1          0   \n229      0.0                         0         0      1      0  1          0   \n335      0.0                         0         1      0      1  1          0   \n432      0.0                         0         1      0      0  1          0   \n578      0.0                         0         1      0      1  1          1   \n610      0.0                         0         1      0      1  1          1   \n655      0.0                         0         0      1      0  1          0   \n727      0.0                         0         1      0      1  1          0   \n738      0.0                         0         1      0      1  1          0   \n763      0.0                         0         1      0      1  1          0   \n765      0.0                         0         0      1      0  1          0   \n775      0.0                         0         1      0      1  1          0   \n797      0.0                         0         1      0      1  1          1   \n822      1.0                         1         1      0      1  1          0   \n839      0.0                         0         1      0      0  1          0   \n\n    Schiller Citology Biopsy  \n8          0        0      0  \n188        0        1      0  \n229        0        0      0  \n335        1        1      1  \n432        0        0      0  \n578        1        1      1  \n610        1        0      1  \n655        0        0      1  \n727        0        1      0  \n738        0        0      0  \n763        0        0      0  \n765        0        0      0  \n775        0        0      0  \n797        1        0      1  \n822        0        0      0  \n839        0        0      0  \n\n[16 rows x 34 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Number of sexual partners</th>\n      <th>First sexual intercourse</th>\n      <th>Num of pregnancies</th>\n      <th>Smokes</th>\n      <th>Smokes (years)</th>\n      <th>Smokes (packs/year)</th>\n      <th>Hormonal Contraceptives</th>\n      <th>Hormonal Contraceptives (years)</th>\n      <th>IUD</th>\n      <th>...</th>\n      <th>STDs:HPV</th>\n      <th>STDs: Number of diagnosis</th>\n      <th>Dx:Cancer</th>\n      <th>Dx:CIN</th>\n      <th>Dx:HPV</th>\n      <th>Dx</th>\n      <th>Hinselmann</th>\n      <th>Schiller</th>\n      <th>Citology</th>\n      <th>Biopsy</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8</th>\n      <td>45</td>\n      <td>1.0</td>\n      <td>20.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>188</th>\n      <td>27</td>\n      <td>5.0</td>\n      <td>19.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>229</th>\n      <td>27</td>\n      <td>3.0</td>\n      <td>15.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>335</th>\n      <td>29</td>\n      <td>2.0</td>\n      <td>18.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>432</th>\n      <td>31</td>\n      <td>3.0</td>\n      <td>19.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>578</th>\n      <td>19</td>\n      <td>1.0</td>\n      <td>18.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>610</th>\n      <td>21</td>\n      <td>2.0</td>\n      <td>18.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>655</th>\n      <td>21</td>\n      <td>3.0</td>\n      <td>17.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>727</th>\n      <td>31</td>\n      <td>2.0</td>\n      <td>19.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>9.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>738</th>\n      <td>27</td>\n      <td>6.0</td>\n      <td>17.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>763</th>\n      <td>41</td>\n      <td>3.0</td>\n      <td>18.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>765</th>\n      <td>25</td>\n      <td>5.0</td>\n      <td>15.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>775</th>\n      <td>27</td>\n      <td>2.0</td>\n      <td>14.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>797</th>\n      <td>33</td>\n      <td>3.0</td>\n      <td>19.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.16</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>822</th>\n      <td>36</td>\n      <td>3.0</td>\n      <td>20.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>839</th>\n      <td>31</td>\n      <td>3.0</td>\n      <td>19.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.08</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>16 rows × 34 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# def split_data(df_total):\n    \n#     full_cancerous = df_total[df_total['Dx'] == 1]\n#     full_non_cancerous = df_total[df_total['Dx'] == 0]\n    \n#     mid_cancerous = len(full_cancerous) // 2\n#     mid_non_cancerous = len(full_non_cancerous) // 2\n    \n#     cancerous1 = full_cancerous.iloc[:mid_cancerous]\n#     cancerous2 = full_cancerous.iloc[mid_cancerous:]\n#     non_cancerous1 = full_non_cancerous.iloc[:mid_non_cancerous]\n#     non_cancerous2 = full_non_cancerous.iloc[mid_non_cancerous:]\n    \n#     return cancerous1.reset_index(drop=True), cancerous2.reset_index(drop=True), non_cancerous1.reset_index(drop=True), non_cancerous2.reset_index(drop=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.899226Z","iopub.execute_input":"2024-07-31T03:24:30.899565Z","iopub.status.idle":"2024-07-31T03:24:30.908422Z","shell.execute_reply.started":"2024-07-31T03:24:30.899536Z","shell.execute_reply":"2024-07-31T03:24:30.907196Z"},"trusted":true},"execution_count":3136,"outputs":[]},{"cell_type":"code","source":"def get_random_indices(num_of_random,len_of_df):\n    \n    indices = []\n    \n    for i in range(num_of_random):\n        indices.append(rd.randint(0,len_of_df-1))\n    \n    return indices","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.909960Z","iopub.execute_input":"2024-07-31T03:24:30.910416Z","iopub.status.idle":"2024-07-31T03:24:30.924570Z","shell.execute_reply.started":"2024-07-31T03:24:30.910375Z","shell.execute_reply":"2024-07-31T03:24:30.923211Z"},"trusted":true},"execution_count":3137,"outputs":[]},{"cell_type":"code","source":"# def create_train_test_set(cancerous1, cancerous2, non_cancerous1, non_cancerous2):\n    \n#     random_nc = pd.DataFrame()\n#     X_train = pd.DataFrame()\n#     X_test = pd.DataFrame()\n#     Y_train = pd.DataFrame()\n#     Y_test = pd.DataFrame()\n    \n#     random_indices = get_random_indices(8,len(non_cancerous1))\n    \n#     random_nc = non_cancerous1.iloc[random_indices]\n    \n#     full_train_set = pd.concat([cancerous1,random_nc])\n    \n#     full_test_set = pd.concat([cancerous2,non_cancerous2])\n    \n#     feature_cols = ['Age', 'Number of sexual partners', 'First sexual intercourse',\n#        'Num of pregnancies', 'Smokes', 'Smokes (years)', 'Smokes (packs/year)',\n#        'Hormonal Contraceptives', 'Hormonal Contraceptives (years)', 'IUD',\n#        'IUD (years)', 'STDs', 'STDs (number)', 'STDs:condylomatosis',\n#        'STDs:cervical condylomatosis', 'STDs:vaginal condylomatosis',\n#        'STDs:vulvo-perineal condylomatosis', 'STDs:syphilis',\n#        'STDs:pelvic inflammatory disease', 'STDs:genital herpes',\n#        'STDs:molluscum contagiosum', 'STDs:AIDS', 'STDs:HIV',\n#        'STDs:Hepatitis B', 'STDs:HPV', 'STDs: Number of diagnosis',\n#        'Dx:Cancer', 'Dx:CIN', 'Dx:HPV', 'Hinselmann', 'Schiller',\n#        'Citology', 'Biopsy']\n    \n#     X_train = full_train_set[feature_cols]\n#     Y_train = pd.concat([Y_train,full_train_set['Dx']])\n    \n#     X_test = full_test_set[feature_cols]\n#     Y_test = pd.concat([Y_test,full_test_set['Dx']])\n    \n#     return X_train.reset_index(drop=True), Y_train.reset_index(drop=True), X_test.reset_index(drop=True), Y_test.reset_index(drop=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.926472Z","iopub.execute_input":"2024-07-31T03:24:30.926929Z","iopub.status.idle":"2024-07-31T03:24:30.937772Z","shell.execute_reply.started":"2024-07-31T03:24:30.926887Z","shell.execute_reply":"2024-07-31T03:24:30.936277Z"},"trusted":true},"execution_count":3138,"outputs":[]},{"cell_type":"code","source":"def get_coefs(X_train,Y_train):\n    \n    num_of_cols = len(X_train.columns)\n    \n    columns_names = [f'x{i+1}' for i in range(num_of_cols)] + ['intercept']\n    \n    coef_list = pd.DataFrame()\n    \n    logreg = LogisticRegression()\n\n    # fit the model with data\n    logreg.fit(X_train, Y_train)\n\n    coef_intercept = np.append(logreg.coef_.flatten(),logreg.intercept_[0])\n    \n    coef_intercept = coef_intercept.reshape(1, -1)\n    \n    coef_list = pd.DataFrame(coef_intercept, columns=columns_names)\n    \n    return coef_list","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.939532Z","iopub.execute_input":"2024-07-31T03:24:30.940049Z","iopub.status.idle":"2024-07-31T03:24:30.954242Z","shell.execute_reply.started":"2024-07-31T03:24:30.940003Z","shell.execute_reply":"2024-07-31T03:24:30.952966Z"},"trusted":true},"execution_count":3139,"outputs":[]},{"cell_type":"code","source":"# def run_simulation(sim_len, df_total):\n    \n#     sim_coef_list = pd.DataFrame()\n    \n#     cancerous1, cancerous2, non_cancerous1, non_cancerous2 = split_data(df_total)\n    \n#     for i in range(sim_len):\n        \n#         X_train, Y_train, X_test, Y_test = create_train_test_set(cancerous1, cancerous2, non_cancerous1, non_cancerous2) \n        \n#         coef_list = get_coefs(X_train,Y_train)\n        \n#         sim_coef_list = pd.concat([coef_list,sim_coef_list])\n        \n#     return sim_coef_list.reset_index(drop=True), X_test, Y_test","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.955702Z","iopub.execute_input":"2024-07-31T03:24:30.956091Z","iopub.status.idle":"2024-07-31T03:24:30.969561Z","shell.execute_reply.started":"2024-07-31T03:24:30.956060Z","shell.execute_reply":"2024-07-31T03:24:30.968076Z"},"trusted":true},"execution_count":3140,"outputs":[]},{"cell_type":"code","source":"# sim_coef_list, X_test, Y_test= run_simulation(100, df_cleaned)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.971569Z","iopub.execute_input":"2024-07-31T03:24:30.971932Z","iopub.status.idle":"2024-07-31T03:24:30.979823Z","shell.execute_reply.started":"2024-07-31T03:24:30.971901Z","shell.execute_reply":"2024-07-31T03:24:30.978673Z"},"trusted":true},"execution_count":3141,"outputs":[]},{"cell_type":"code","source":"# sim_coef_list.head(500)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.988190Z","iopub.execute_input":"2024-07-31T03:24:30.988592Z","iopub.status.idle":"2024-07-31T03:24:30.994041Z","shell.execute_reply.started":"2024-07-31T03:24:30.988560Z","shell.execute_reply":"2024-07-31T03:24:30.992736Z"},"trusted":true},"execution_count":3142,"outputs":[]},{"cell_type":"code","source":"def get_avg_coefs_with_df(sim_coef_list):\n    # Compute the mean of each column in the DataFrame\n    avg_coefs = sim_coef_list.mean()\n    \n    # Convert the resulting Series to a NumPy array\n    avg_coefs_array = avg_coefs.to_numpy()\n    \n    # Create a DataFrame from the average coefficients\n    avg_coefs_df = pd.DataFrame([avg_coefs], columns=sim_coef_list.columns, index=['avg'])\n    \n    # Concatenate the original DataFrame with the average coefficients DataFrame\n    result_df = pd.concat([sim_coef_list, avg_coefs_df], ignore_index=False)\n    \n    return result_df, avg_coefs_array","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:30.996282Z","iopub.execute_input":"2024-07-31T03:24:30.996653Z","iopub.status.idle":"2024-07-31T03:24:31.006088Z","shell.execute_reply.started":"2024-07-31T03:24:30.996622Z","shell.execute_reply":"2024-07-31T03:24:31.004870Z"},"trusted":true},"execution_count":3143,"outputs":[]},{"cell_type":"code","source":"# avg_df, avg_arr= get_avg_coefs_with_df(sim_coef_list)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.007675Z","iopub.execute_input":"2024-07-31T03:24:31.008070Z","iopub.status.idle":"2024-07-31T03:24:31.017783Z","shell.execute_reply.started":"2024-07-31T03:24:31.008037Z","shell.execute_reply":"2024-07-31T03:24:31.016581Z"},"trusted":true},"execution_count":3144,"outputs":[]},{"cell_type":"code","source":"# avg_df.head(200)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.019548Z","iopub.execute_input":"2024-07-31T03:24:31.020073Z","iopub.status.idle":"2024-07-31T03:24:31.030063Z","shell.execute_reply.started":"2024-07-31T03:24:31.019930Z","shell.execute_reply":"2024-07-31T03:24:31.029024Z"},"trusted":true},"execution_count":3145,"outputs":[]},{"cell_type":"code","source":"# X_test.columns","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.031508Z","iopub.execute_input":"2024-07-31T03:24:31.031892Z","iopub.status.idle":"2024-07-31T03:24:31.041615Z","shell.execute_reply.started":"2024-07-31T03:24:31.031862Z","shell.execute_reply":"2024-07-31T03:24:31.040493Z"},"trusted":true},"execution_count":3146,"outputs":[]},{"cell_type":"code","source":"# avg_arr","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.043264Z","iopub.execute_input":"2024-07-31T03:24:31.043668Z","iopub.status.idle":"2024-07-31T03:24:31.054132Z","shell.execute_reply.started":"2024-07-31T03:24:31.043636Z","shell.execute_reply":"2024-07-31T03:24:31.052795Z"},"trusted":true},"execution_count":3147,"outputs":[]},{"cell_type":"code","source":"# avg_df.head(100)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.055724Z","iopub.execute_input":"2024-07-31T03:24:31.056160Z","iopub.status.idle":"2024-07-31T03:24:31.066426Z","shell.execute_reply.started":"2024-07-31T03:24:31.056113Z","shell.execute_reply":"2024-07-31T03:24:31.065211Z"},"trusted":true},"execution_count":3148,"outputs":[]},{"cell_type":"code","source":"# from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve\n# def evaluate_logistic_regression(X_test, y_test, coefs):\n#     \"\"\"\n#     Evaluate logistic regression performance on test data using provided coefficients,\n#     and plot relevant metrics including the sigmoid function, confusion matrix, ROC curve.\n    \n#     Parameters:\n#     X_test (pd.DataFrame or np.ndarray): Test feature data.\n#     y_test (pd.Series or np.ndarray): True labels for the test data.\n#     coefs (np.ndarray): Coefficients including the intercept as the last element.\n    \n#     Returns:\n#     dict: Performance metrics including accuracy, precision, recall, F1 score, and ROC AUC.\n#     \"\"\"\n    \n#     X_test = X_test.apply(pd.to_numeric, errors='coerce')\n    \n#     # Extract feature coefficients and intercept\n#     intercept = coefs[-1]\n#     feature_coefs = coefs[:-1]\n    \n#     # Compute logits (linear combination of features and coefficients)\n#     logits = np.dot(X_test, feature_coefs) + intercept\n    \n#     y_vals = []\n    \n#     for i in logits:\n#         if i > 0:\n#             y_vals.append(1)\n#         else:\n#             y_vals.append(0)\n    \n#     # Compute predicted probabilities using the logistic function\n#     probabilities = 1 / (1 + np.exp(-logits))\n    \n#     # Convert probabilities to binary predictions using a threshold (e.g., 0.5)\n#     predictions = (probabilities > 0.5).astype(int)\n    \n#     accuracy = accuracy_score(y_test, predictions) \n    \n#     n = len(X_test)\n#     mse = 1 - accuracy\n#     num_params = len(X_test.columns)\n    \n#     aic = n * math.log(mse) + 2 * num_params\n    \n#     # Calculate performance metrics\n#     metrics = {\n#         'Accuracy': accuracy,\n#         'Precision': precision_score(y_test, predictions),\n#         'Recall': recall_score(y_test, predictions),\n#         'F1 Score': f1_score(y_test, predictions),\n#         'ROC AUC': roc_auc_score(y_test, probabilities),\n#         'AIC Score': aic,\n#     }\n    \n#     # Plot the sigmoid function and overlay computed z values\n#     z = logits  # z values based on the linear combination\n#     sigmoid = 1 / (1 + np.exp(-z))\n    \n#     # Plot Sigmoid Function\n#     plt.figure(figsize=(8, 4))\n#     z_values = np.linspace(-7.5, 5, 400)\n#     sigmoid_curve = 1 / (1 + np.exp(-z_values))\n#     plt.plot(z_values, sigmoid_curve, label='Sigmoid Function Curve')\n#     plt.scatter(z, y_vals, color='red', s=50, alpha=0.7, label='Computed Sigmoid Values')\n#     plt.title('Sigmoid Function with Computed Values')\n#     plt.xlabel('Logits (z)')\n#     plt.ylabel('Probability')\n#     plt.grid(True)\n#     plt.legend()\n#     plt.show()\n    \n#     # Plot confusion matrix\n#     cm = confusion_matrix(y_test, predictions)\n#     cm_df = pd.DataFrame(cm, index=['Actual Negative', 'Actual Positive'], columns=['Predicted Negative', 'Predicted Positive'])\n#     plt.figure(figsize=(8, 6))\n#     sns.heatmap(cm_df, annot=True, fmt='d', cmap='Blues', cbar=False)\n#     plt.title('Confusion Matrix')\n#     plt.xlabel('Predicted Labels')\n#     plt.ylabel('True Labels')\n#     plt.show()\n    \n#     # Plot ROC curve\n#     fpr, tpr, _ = roc_curve(y_test, probabilities)\n#     auc = roc_auc_score(y_test, probabilities)\n#     plt.figure(figsize=(8, 4))\n#     plt.plot(fpr, tpr, color='blue', lw=2, label=\"auc=\"+str(auc))\n#     plt.plot([0, 1], [0, 1], color='gray', linestyle='--')\n#     plt.title('ROC Curve')\n#     plt.xlabel('False Positive Rate')\n#     plt.ylabel('True Positive Rate')\n#     plt.legend()\n#     plt.grid(True)\n#     plt.show()\n    \n#     return metrics","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.068236Z","iopub.execute_input":"2024-07-31T03:24:31.068659Z","iopub.status.idle":"2024-07-31T03:24:31.081090Z","shell.execute_reply.started":"2024-07-31T03:24:31.068621Z","shell.execute_reply":"2024-07-31T03:24:31.079741Z"},"trusted":true},"execution_count":3149,"outputs":[]},{"cell_type":"code","source":"# len(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.082666Z","iopub.execute_input":"2024-07-31T03:24:31.083056Z","iopub.status.idle":"2024-07-31T03:24:31.095601Z","shell.execute_reply.started":"2024-07-31T03:24:31.083019Z","shell.execute_reply":"2024-07-31T03:24:31.094477Z"},"trusted":true},"execution_count":3150,"outputs":[]},{"cell_type":"code","source":"# metrics = evaluate_logistic_regression(X_test, Y_test, avg_arr)\n# print(metrics)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.096939Z","iopub.execute_input":"2024-07-31T03:24:31.097300Z","iopub.status.idle":"2024-07-31T03:24:31.107215Z","shell.execute_reply.started":"2024-07-31T03:24:31.097270Z","shell.execute_reply":"2024-07-31T03:24:31.106036Z"},"trusted":true},"execution_count":3151,"outputs":[]},{"cell_type":"code","source":"# def mod_create_train_test_set(cancerous1, cancerous2, non_cancerous1, non_cancerous2, feature_cols):\n    \n#     random_nc = pd.DataFrame()\n#     X_train = pd.DataFrame()\n#     X_test = pd.DataFrame()\n#     Y_train = pd.DataFrame()\n#     Y_test = pd.DataFrame()\n    \n#     random_indices = get_random_indices(8,len(non_cancerous1))\n    \n#     random_nc = non_cancerous1.iloc[random_indices]\n    \n#     full_train_set = pd.concat([cancerous1,random_nc])\n    \n#     full_test_set = pd.concat([cancerous2,non_cancerous2])\n    \n#     X_train = full_train_set[feature_cols]\n#     Y_train = pd.concat([Y_train,full_train_set['Dx']])\n    \n#     X_test = full_test_set[feature_cols]\n#     Y_test = pd.concat([Y_test,full_test_set['Dx']])\n    \n#     return X_train.reset_index(drop=True), Y_train.reset_index(drop=True), X_test.reset_index(drop=True), Y_test.reset_index(drop=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.108993Z","iopub.execute_input":"2024-07-31T03:24:31.109443Z","iopub.status.idle":"2024-07-31T03:24:31.118433Z","shell.execute_reply.started":"2024-07-31T03:24:31.109402Z","shell.execute_reply":"2024-07-31T03:24:31.117263Z"},"trusted":true},"execution_count":3152,"outputs":[]},{"cell_type":"code","source":"# def mod_run_simulation(sim_len, df_total, feature_cols):\n    \n#     sim_coef_list = pd.DataFrame()\n    \n#     cancerous1, cancerous2, non_cancerous1, non_cancerous2 = split_data(df_total)\n    \n#     for i in range(sim_len):\n        \n#         X_train, Y_train, X_test, Y_test = mod_create_train_test_set(cancerous1, cancerous2, non_cancerous1, non_cancerous2, feature_cols) \n        \n#         coef_list = get_coefs(X_train,Y_train)\n        \n#         sim_coef_list = pd.concat([coef_list,sim_coef_list])\n        \n#     return sim_coef_list.reset_index(drop=True), X_test, Y_test","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.120085Z","iopub.execute_input":"2024-07-31T03:24:31.121254Z","iopub.status.idle":"2024-07-31T03:24:31.133190Z","shell.execute_reply.started":"2024-07-31T03:24:31.121209Z","shell.execute_reply":"2024-07-31T03:24:31.132031Z"},"trusted":true},"execution_count":3153,"outputs":[]},{"cell_type":"code","source":"# from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve\n# def mod_evaluate_logistic_regression(X_test, y_test, coefs):\n    \n#     \"\"\"\n#     Evaluate logistic regression performance on test data using provided coefficients,\n#     and plot relevant metrics including the sigmoid function, confusion matrix, ROC curve.\n    \n#     Parameters:\n#     X_test (pd.DataFrame or np.ndarray): Test feature data.\n#     y_test (pd.Series or np.ndarray): True labels for the test data.\n#     coefs (np.ndarray): Coefficients including the intercept as the last element.\n    \n#     Returns:\n#     dict: Performance metrics including accuracy, precision, recall, F1 score, and ROC AUC.\n#     \"\"\"\n    \n#     X_test = X_test.apply(pd.to_numeric, errors='coerce')\n    \n#     # Extract feature coefficients and intercept\n#     intercept = coefs[-1]\n#     feature_coefs = coefs[:-1]\n    \n#     # Compute logits (linear combination of features and coefficients)\n#     logits = np.dot(X_test, feature_coefs) + intercept\n    \n#     # Compute predicted probabilities using the logistic function\n#     probabilities = 1 / (1 + np.exp(-logits))\n    \n#     # Convert probabilities to binary predictions using a threshold (e.g., 0.5)\n#     predictions = (probabilities > 0.5).astype(int)\n    \n#     acc = accuracy_score(y_test, predictions)\n    \n#     n = len(X_test)\n#     mse = 1 - acc\n#     num_params = len(X_test.columns)\n    \n#     # Calculate performance metrics\n#     metrics = {\n#         'Accuracy': acc,\n#         'Precision': precision_score(y_test, predictions),\n#         'Recall': recall_score(y_test, predictions),\n#         'F1 Score': f1_score(y_test, predictions),\n#         'ROC AUC': roc_auc_score(y_test, probabilities),\n#         'AIC Score': calculate_AIC(n,mse,num_params)\n#     }\n    \n#     return metrics","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.134659Z","iopub.execute_input":"2024-07-31T03:24:31.135096Z","iopub.status.idle":"2024-07-31T03:24:31.144881Z","shell.execute_reply.started":"2024-07-31T03:24:31.135055Z","shell.execute_reply":"2024-07-31T03:24:31.143648Z"},"trusted":true},"execution_count":3154,"outputs":[]},{"cell_type":"code","source":"# import itertools\n# def finding_optimal_attributes(df_total, sim_len, max_cols):\n    \n#     feature_cols = ['Age', 'Number of sexual partners', 'First sexual intercourse',\n#        'Num of pregnancies', 'Smokes', 'Smokes (years)', 'Smokes (packs/year)',\n#        'Hormonal Contraceptives', 'Hormonal Contraceptives (years)', 'IUD',\n#        'IUD (years)', 'STDs', 'STDs (number)', 'STDs:condylomatosis',\n#        'STDs:cervical condylomatosis', 'STDs:vaginal condylomatosis',\n#        'STDs:vulvo-perineal condylomatosis', 'STDs:syphilis',\n#        'STDs:pelvic inflammatory disease', 'STDs:genital herpes',\n#        'STDs:molluscum contagiosum', 'STDs:AIDS', 'STDs:HIV',\n#        'STDs:Hepatitis B', 'STDs:HPV', 'STDs: Number of diagnosis',\n#        'Dx:Cancer', 'Dx:CIN', 'Dx:HPV', 'Hinselmann', 'Schiller',\n#        'Citology', 'Biopsy']\n\n#     best_combination = None\n#     best_accuracy = 0\n#     best_aic = float('inf')\n\n#     results = []\n\n#     for L in range(1, max_cols):\n#         for subset in itertools.combinations(feature_cols, L):\n            \n#             df_optimized_x = df_total[list(subset)].reset_index(drop=True)\n#             df_optimized_y = df_total[['Dx']].reset_index(drop=True)\n#             df_optimized = pd.concat([df_optimized_x, df_optimized_y], axis=1)\n\n#             sim_coef_list, X_test, Y_test = mod_run_simulation(sim_len, df_optimized, list(subset))\n\n#             avg_df, avg_arr = get_avg_coefs_with_df(sim_coef_list)\n\n#             metrics = mod_evaluate_logistic_regression(X_test, Y_test, avg_arr)\n\n#             results.append({\n#                 'features': subset,\n#                 'accuracy': metrics['Accuracy'],\n#                 'aic': metrics['AIC Score']\n#             })\n\n#             if metrics['Accuracy'] >= best_accuracy and metrics['AIC Score'] <= best_aic:\n#                 best_accuracy = metrics['Accuracy']\n#                 best_aic = metrics['AIC Score']\n#                 best_combination = subset\n\n#     results_df = pd.DataFrame(results)\n#     return results_df, best_combination, best_accuracy, best_aic","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.146609Z","iopub.execute_input":"2024-07-31T03:24:31.146971Z","iopub.status.idle":"2024-07-31T03:24:31.161159Z","shell.execute_reply.started":"2024-07-31T03:24:31.146942Z","shell.execute_reply":"2024-07-31T03:24:31.159906Z"},"trusted":true},"execution_count":3155,"outputs":[]},{"cell_type":"code","source":"# corr_matrix = df_cleaned.astype(float).corr()\n# corr_matrix.head(35)\n# corr_matrix.style.background_gradient(cmap='coolwarm')","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.162592Z","iopub.execute_input":"2024-07-31T03:24:31.162997Z","iopub.status.idle":"2024-07-31T03:24:31.175638Z","shell.execute_reply.started":"2024-07-31T03:24:31.162944Z","shell.execute_reply":"2024-07-31T03:24:31.174457Z"},"trusted":true},"execution_count":3156,"outputs":[]},{"cell_type":"code","source":"\n# # Select upper triangle of correlation matrix\n# upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(bool))\n\n# # Find index of feature columns with correlation greater than 0.95\n# to_drop = [column for column in upper.columns if any(abs(upper[column]) >=0.8)]\n\n# to_drop","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.177086Z","iopub.execute_input":"2024-07-31T03:24:31.177495Z","iopub.status.idle":"2024-07-31T03:24:31.187398Z","shell.execute_reply.started":"2024-07-31T03:24:31.177463Z","shell.execute_reply":"2024-07-31T03:24:31.186229Z"},"trusted":true},"execution_count":3157,"outputs":[]},{"cell_type":"code","source":"# df_cleaned_2 = df_cleaned.drop(to_drop, axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.188768Z","iopub.execute_input":"2024-07-31T03:24:31.189129Z","iopub.status.idle":"2024-07-31T03:24:31.198994Z","shell.execute_reply.started":"2024-07-31T03:24:31.189085Z","shell.execute_reply":"2024-07-31T03:24:31.197834Z"},"trusted":true},"execution_count":3158,"outputs":[]},{"cell_type":"code","source":"# sim_len = 100\n# df_total = df_cleaned_2\n# feature_cols = df_total.columns\n# sim_coef_list_2, X_test_2, Y_test_2 = mod_run_simulation(sim_len, df_total, feature_cols)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.200577Z","iopub.execute_input":"2024-07-31T03:24:31.200932Z","iopub.status.idle":"2024-07-31T03:24:31.210413Z","shell.execute_reply.started":"2024-07-31T03:24:31.200901Z","shell.execute_reply":"2024-07-31T03:24:31.209319Z"},"trusted":true},"execution_count":3159,"outputs":[]},{"cell_type":"code","source":"# avg_df_2, avg_arr_2 = get_avg_coefs_with_df(sim_coef_list_2)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.211626Z","iopub.execute_input":"2024-07-31T03:24:31.212004Z","iopub.status.idle":"2024-07-31T03:24:31.221613Z","shell.execute_reply.started":"2024-07-31T03:24:31.211948Z","shell.execute_reply":"2024-07-31T03:24:31.220576Z"},"trusted":true},"execution_count":3160,"outputs":[]},{"cell_type":"code","source":"# metrics_2 = evaluate_logistic_regression(X_test_2, Y_test_2, avg_arr_2)\n# print(metrics_2)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.223388Z","iopub.execute_input":"2024-07-31T03:24:31.223840Z","iopub.status.idle":"2024-07-31T03:24:31.232372Z","shell.execute_reply.started":"2024-07-31T03:24:31.223798Z","shell.execute_reply":"2024-07-31T03:24:31.231276Z"},"trusted":true},"execution_count":3161,"outputs":[]},{"cell_type":"code","source":"def get_std_of_coef(avg_df):\n    # Compute the mean of each column in the DataFrame\n    std_coefs = avg_df.iloc[:-1,:-1].std()\n    \n    # Convert the resulting Series to a NumPy array\n    std_coefs_array = std_coefs.to_numpy()\n    \n    # Create a DataFrame from the average coefficients\n    std_coefs_df = pd.DataFrame([std_coefs], columns=avg_df.columns, index=['std'])\n    \n    # Concatenate the original DataFrame with the average coefficients DataFrame\n    result_df = pd.concat([avg_df, std_coefs_df], ignore_index=False)\n    \n    return result_df, std_coefs_array","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.233692Z","iopub.execute_input":"2024-07-31T03:24:31.234064Z","iopub.status.idle":"2024-07-31T03:24:31.244427Z","shell.execute_reply.started":"2024-07-31T03:24:31.234021Z","shell.execute_reply":"2024-07-31T03:24:31.243275Z"},"trusted":true},"execution_count":3162,"outputs":[]},{"cell_type":"code","source":"# std_test, std_test_array = get_std_of_coef(avg_df_2)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.246138Z","iopub.execute_input":"2024-07-31T03:24:31.246554Z","iopub.status.idle":"2024-07-31T03:24:31.254186Z","shell.execute_reply.started":"2024-07-31T03:24:31.246515Z","shell.execute_reply":"2024-07-31T03:24:31.253121Z"},"trusted":true},"execution_count":3163,"outputs":[]},{"cell_type":"code","source":"# std_test.head(200)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.257861Z","iopub.execute_input":"2024-07-31T03:24:31.258587Z","iopub.status.idle":"2024-07-31T03:24:31.266334Z","shell.execute_reply.started":"2024-07-31T03:24:31.258549Z","shell.execute_reply":"2024-07-31T03:24:31.265082Z"},"trusted":true},"execution_count":3164,"outputs":[]},{"cell_type":"code","source":"def coef_divided_std(std_df):\n    # Divide the second-to-last row by the last row and add the result as a new row\n    div_result = std_df.iloc[:-1,-2] / std_df.iloc[:-1,-1]\n    div_result.name = 'div'\n    \n    # Create a DataFrame from the div_result Series\n    div_result_df = pd.DataFrame([div_result])\n    \n    # Concatenate the original DataFrame with the div_result DataFrame\n    result_df = pd.concat([std_df, div_result_df], ignore_index=False)\n    \n    # Convert the result DataFrame to a NumPy array\n    std_coefs_array = result_df.to_numpy()\n    \n    return result_df, std_coefs_array","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.267869Z","iopub.execute_input":"2024-07-31T03:24:31.268358Z","iopub.status.idle":"2024-07-31T03:24:31.278138Z","shell.execute_reply.started":"2024-07-31T03:24:31.268315Z","shell.execute_reply":"2024-07-31T03:24:31.276927Z"},"trusted":true},"execution_count":3165,"outputs":[]},{"cell_type":"code","source":"# std_coef_df, std_coefs_array = coef_divided_std(std_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.279752Z","iopub.execute_input":"2024-07-31T03:24:31.280255Z","iopub.status.idle":"2024-07-31T03:24:31.294200Z","shell.execute_reply.started":"2024-07-31T03:24:31.280210Z","shell.execute_reply":"2024-07-31T03:24:31.293041Z"},"trusted":true},"execution_count":3166,"outputs":[]},{"cell_type":"code","source":"# std_coef_df.head(1000)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.295524Z","iopub.execute_input":"2024-07-31T03:24:31.295862Z","iopub.status.idle":"2024-07-31T03:24:31.305615Z","shell.execute_reply.started":"2024-07-31T03:24:31.295831Z","shell.execute_reply":"2024-07-31T03:24:31.304515Z"},"trusted":true},"execution_count":3167,"outputs":[]},{"cell_type":"code","source":"# X_test_2.columns[21]","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.307028Z","iopub.execute_input":"2024-07-31T03:24:31.307450Z","iopub.status.idle":"2024-07-31T03:24:31.317135Z","shell.execute_reply.started":"2024-07-31T03:24:31.307408Z","shell.execute_reply":"2024-07-31T03:24:31.315960Z"},"trusted":true},"execution_count":3168,"outputs":[]},{"cell_type":"code","source":"# df_cleaned_3 = df_cleaned_2.drop(X_test_2.columns[21], axis = 1)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.318765Z","iopub.execute_input":"2024-07-31T03:24:31.319214Z","iopub.status.idle":"2024-07-31T03:24:31.328552Z","shell.execute_reply.started":"2024-07-31T03:24:31.319179Z","shell.execute_reply":"2024-07-31T03:24:31.327407Z"},"trusted":true},"execution_count":3169,"outputs":[]},{"cell_type":"code","source":"# sim_len = 100\n# df_total = df_cleaned_3\n# feature_cols = df_total.columns\n# sim_coef_list_3, X_test_3, Y_test_3 = mod_run_simulation(sim_len, df_total, feature_cols)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.330120Z","iopub.execute_input":"2024-07-31T03:24:31.330621Z","iopub.status.idle":"2024-07-31T03:24:31.339501Z","shell.execute_reply.started":"2024-07-31T03:24:31.330576Z","shell.execute_reply":"2024-07-31T03:24:31.338364Z"},"trusted":true},"execution_count":3170,"outputs":[]},{"cell_type":"code","source":"# avg_df_3, avg_arr_3 = get_avg_coefs_with_df(sim_coef_list_3)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.341135Z","iopub.execute_input":"2024-07-31T03:24:31.341596Z","iopub.status.idle":"2024-07-31T03:24:31.352845Z","shell.execute_reply.started":"2024-07-31T03:24:31.341553Z","shell.execute_reply":"2024-07-31T03:24:31.351730Z"},"trusted":true},"execution_count":3171,"outputs":[]},{"cell_type":"code","source":"# metrics_3 = evaluate_logistic_regression(X_test_3, Y_test_3, avg_arr_3)\n# print(metrics_3)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.354570Z","iopub.execute_input":"2024-07-31T03:24:31.355026Z","iopub.status.idle":"2024-07-31T03:24:31.363938Z","shell.execute_reply.started":"2024-07-31T03:24:31.354992Z","shell.execute_reply":"2024-07-31T03:24:31.362389Z"},"trusted":true},"execution_count":3172,"outputs":[]},{"cell_type":"code","source":"# std_test_2, std_test_array_2 = get_std_of_coef(avg_df_3)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.365545Z","iopub.execute_input":"2024-07-31T03:24:31.366942Z","iopub.status.idle":"2024-07-31T03:24:31.374362Z","shell.execute_reply.started":"2024-07-31T03:24:31.366897Z","shell.execute_reply":"2024-07-31T03:24:31.373270Z"},"trusted":true},"execution_count":3173,"outputs":[]},{"cell_type":"code","source":"# std_coef_df_2, std_coefs_array_2 = coef_divided_std(std_test_2)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.375709Z","iopub.execute_input":"2024-07-31T03:24:31.376134Z","iopub.status.idle":"2024-07-31T03:24:31.385864Z","shell.execute_reply.started":"2024-07-31T03:24:31.376092Z","shell.execute_reply":"2024-07-31T03:24:31.384824Z"},"trusted":true},"execution_count":3174,"outputs":[]},{"cell_type":"code","source":"# df_cleaned_3.columns[12]","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.387380Z","iopub.execute_input":"2024-07-31T03:24:31.387786Z","iopub.status.idle":"2024-07-31T03:24:31.396576Z","shell.execute_reply.started":"2024-07-31T03:24:31.387741Z","shell.execute_reply":"2024-07-31T03:24:31.395390Z"},"trusted":true},"execution_count":3175,"outputs":[]},{"cell_type":"code","source":"# df_cleaned_4 = df_cleaned_3.drop(df_cleaned_3.columns[12],axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.397945Z","iopub.execute_input":"2024-07-31T03:24:31.398326Z","iopub.status.idle":"2024-07-31T03:24:31.406468Z","shell.execute_reply.started":"2024-07-31T03:24:31.398296Z","shell.execute_reply":"2024-07-31T03:24:31.405289Z"},"trusted":true},"execution_count":3176,"outputs":[]},{"cell_type":"code","source":"# sim_len = 100\n# df_total = df_cleaned_4\n# feature_cols = df_total.columns\n# sim_coef_list_4, X_test_4, Y_test_4 = mod_run_simulation(sim_len, df_total, feature_cols)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.407867Z","iopub.execute_input":"2024-07-31T03:24:31.409038Z","iopub.status.idle":"2024-07-31T03:24:31.418001Z","shell.execute_reply.started":"2024-07-31T03:24:31.409003Z","shell.execute_reply":"2024-07-31T03:24:31.416937Z"},"trusted":true},"execution_count":3177,"outputs":[]},{"cell_type":"code","source":"# avg_df_4, avg_arr_4 = get_avg_coefs_with_df(sim_coef_list_4)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.419351Z","iopub.execute_input":"2024-07-31T03:24:31.420084Z","iopub.status.idle":"2024-07-31T03:24:31.427959Z","shell.execute_reply.started":"2024-07-31T03:24:31.420035Z","shell.execute_reply":"2024-07-31T03:24:31.426743Z"},"trusted":true},"execution_count":3178,"outputs":[]},{"cell_type":"code","source":"# metrics_4 = evaluate_logistic_regression(X_test_4, Y_test_4, avg_arr_4)\n# print(metrics_4)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.429442Z","iopub.execute_input":"2024-07-31T03:24:31.429769Z","iopub.status.idle":"2024-07-31T03:24:31.438017Z","shell.execute_reply.started":"2024-07-31T03:24:31.429741Z","shell.execute_reply":"2024-07-31T03:24:31.436900Z"},"trusted":true},"execution_count":3179,"outputs":[]},{"cell_type":"code","source":"# std_test_3, std_test_array_3 = get_std_of_coef(avg_df_4)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.439329Z","iopub.execute_input":"2024-07-31T03:24:31.439795Z","iopub.status.idle":"2024-07-31T03:24:31.449003Z","shell.execute_reply.started":"2024-07-31T03:24:31.439754Z","shell.execute_reply":"2024-07-31T03:24:31.447778Z"},"trusted":true},"execution_count":3180,"outputs":[]},{"cell_type":"code","source":"# std_coef_df_2, std_coefs_array_2 = coef_divided_std(std_test_3)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.461072Z","iopub.execute_input":"2024-07-31T03:24:31.461796Z","iopub.status.idle":"2024-07-31T03:24:31.466772Z","shell.execute_reply.started":"2024-07-31T03:24:31.461760Z","shell.execute_reply":"2024-07-31T03:24:31.465463Z"},"trusted":true},"execution_count":3181,"outputs":[]},{"cell_type":"code","source":"# std_coef_df_2.head(200)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.468340Z","iopub.execute_input":"2024-07-31T03:24:31.468714Z","iopub.status.idle":"2024-07-31T03:24:31.478054Z","shell.execute_reply.started":"2024-07-31T03:24:31.468682Z","shell.execute_reply":"2024-07-31T03:24:31.476725Z"},"trusted":true},"execution_count":3182,"outputs":[]},{"cell_type":"code","source":"# std_coef_df_2['x13']","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.479684Z","iopub.execute_input":"2024-07-31T03:24:31.480267Z","iopub.status.idle":"2024-07-31T03:24:31.489412Z","shell.execute_reply.started":"2024-07-31T03:24:31.480132Z","shell.execute_reply":"2024-07-31T03:24:31.488063Z"},"trusted":true},"execution_count":3183,"outputs":[]},{"cell_type":"code","source":"# df_cleaned_4[df_cleaned_4.columns[12]]","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.490919Z","iopub.execute_input":"2024-07-31T03:24:31.491326Z","iopub.status.idle":"2024-07-31T03:24:31.501130Z","shell.execute_reply.started":"2024-07-31T03:24:31.491288Z","shell.execute_reply":"2024-07-31T03:24:31.499933Z"},"trusted":true},"execution_count":3184,"outputs":[]},{"cell_type":"code","source":"# df_cleaned_5 = df_cleaned_4.drop('STDs:vaginal condylomatosis',axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.502580Z","iopub.execute_input":"2024-07-31T03:24:31.502917Z","iopub.status.idle":"2024-07-31T03:24:31.511947Z","shell.execute_reply.started":"2024-07-31T03:24:31.502887Z","shell.execute_reply":"2024-07-31T03:24:31.510766Z"},"trusted":true},"execution_count":3185,"outputs":[]},{"cell_type":"code","source":"# sim_len = 100\n# df_total = df_cleaned_5\n# feature_cols = df_total.columns\n# sim_coef_list_5, X_test_5, Y_test_5 = mod_run_simulation(sim_len, df_total, feature_cols)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.513434Z","iopub.execute_input":"2024-07-31T03:24:31.513779Z","iopub.status.idle":"2024-07-31T03:24:31.527527Z","shell.execute_reply.started":"2024-07-31T03:24:31.513750Z","shell.execute_reply":"2024-07-31T03:24:31.526335Z"},"trusted":true},"execution_count":3186,"outputs":[]},{"cell_type":"code","source":"# avg_df_5, avg_arr_5 = get_avg_coefs_with_df(sim_coef_list_5)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.528822Z","iopub.execute_input":"2024-07-31T03:24:31.530073Z","iopub.status.idle":"2024-07-31T03:24:31.538543Z","shell.execute_reply.started":"2024-07-31T03:24:31.530027Z","shell.execute_reply":"2024-07-31T03:24:31.537376Z"},"trusted":true},"execution_count":3187,"outputs":[]},{"cell_type":"code","source":"# metrics_5 = evaluate_logistic_regression(X_test_5, Y_test_5, avg_arr_5)\n# print(metrics_5)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.540319Z","iopub.execute_input":"2024-07-31T03:24:31.541342Z","iopub.status.idle":"2024-07-31T03:24:31.550134Z","shell.execute_reply.started":"2024-07-31T03:24:31.541253Z","shell.execute_reply":"2024-07-31T03:24:31.549060Z"},"trusted":true},"execution_count":3188,"outputs":[]},{"cell_type":"code","source":"def mod_create_train_test_set(cancerous1, cancerous2, non_cancerous1, non_cancerous2, feature_cols, diagnosis_col_name):\n    \n    feature_cols = feature_cols.drop(diagnosis_col_name)\n    \n    random_nc = pd.DataFrame()\n    X_train = pd.DataFrame()\n    X_test = pd.DataFrame()\n    Y_train = pd.DataFrame()\n    Y_test = pd.DataFrame()\n    \n    random_indices = get_random_indices(8,len(non_cancerous1))\n    \n    random_nc = non_cancerous1.iloc[random_indices]\n    \n    full_train_set = pd.concat([cancerous1,random_nc])\n    \n    full_test_set = pd.concat([cancerous2,non_cancerous2])\n    \n    X_train = full_train_set[feature_cols]\n    Y_train = pd.concat([Y_train,full_train_set['Dx']])\n    \n    X_test = full_test_set[feature_cols]\n    Y_test = pd.concat([Y_test,full_test_set['Dx']])\n    \n    return X_train.reset_index(drop=True), Y_train.reset_index(drop=True), X_test.reset_index(drop=True), Y_test.reset_index(drop=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.551606Z","iopub.execute_input":"2024-07-31T03:24:31.552042Z","iopub.status.idle":"2024-07-31T03:24:31.562693Z","shell.execute_reply.started":"2024-07-31T03:24:31.552002Z","shell.execute_reply":"2024-07-31T03:24:31.561328Z"},"trusted":true},"execution_count":3189,"outputs":[]},{"cell_type":"code","source":"def mod_run_simulation(sim_len, df_total, feature_cols, diagnosis_col_name):\n    \n    sim_coef_list = pd.DataFrame()\n    \n    cancerous1, cancerous2, non_cancerous1, non_cancerous2 = split_data(df_total)\n    \n    for i in range(sim_len):\n        \n        X_train, Y_train, X_test, Y_test = mod_create_train_test_set(cancerous1, cancerous2, non_cancerous1, non_cancerous2, feature_cols, diagnosis_col_name) \n        \n        coef_list = get_coefs(X_train,Y_train)\n        \n        sim_coef_list = pd.concat([coef_list,sim_coef_list])\n        \n    return sim_coef_list.reset_index(drop=True), X_test, Y_test","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.564653Z","iopub.execute_input":"2024-07-31T03:24:31.565115Z","iopub.status.idle":"2024-07-31T03:24:31.575342Z","shell.execute_reply.started":"2024-07-31T03:24:31.565073Z","shell.execute_reply":"2024-07-31T03:24:31.574132Z"},"trusted":true},"execution_count":3190,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve\ndef mod_evaluate_logistic_regression(X_test, y_test, coefs):\n    \"\"\"\n    Evaluate logistic regression performance on test data using provided coefficients,\n    and plot relevant metrics including the sigmoid function, confusion matrix, ROC curve.\n    \n    Parameters:\n    X_test (pd.DataFrame or np.ndarray): Test feature data.\n    y_test (pd.Series or np.ndarray): True labels for the test data.\n    coefs (np.ndarray): Coefficients including the intercept as the last element.\n    \n    Returns:\n    dict: Performance metrics including accuracy, precision, recall, F1 score, and ROC AUC.\n    \"\"\"\n    \n    X_test = X_test.apply(pd.to_numeric, errors='coerce')\n    \n    # Extract feature coefficients and intercept\n    intercept = coefs[-1]\n    feature_coefs = coefs[:-1]\n    \n    # Compute logits (linear combination of features and coefficients)\n    logits = np.dot(X_test, feature_coefs) + intercept\n    \n    y_vals = []\n    \n    for i in logits:\n        if i > 0:\n            y_vals.append(1)\n        else:\n            y_vals.append(0)\n    \n    # Compute predicted probabilities using the logistic function\n    probabilities = 1 / (1 + np.exp(-logits))\n    \n    # Convert probabilities to binary predictions using a threshold (e.g., 0.5)\n    predictions = (probabilities > 0.5).astype(int)\n    \n    accuracy = accuracy_score(y_test, predictions) \n    \n    n = len(X_test)\n    mse = 1 - accuracy\n    num_params = len(X_test.columns)\n    \n    aic = n * math.log(mse) + 2 * num_params\n    \n    # Calculate performance metrics\n    metrics = {\n        'Accuracy': accuracy,\n        'Precision': precision_score(y_test, predictions),\n        'Recall': recall_score(y_test, predictions),\n        'F1 Score': f1_score(y_test, predictions),\n        'ROC AUC': roc_auc_score(y_test, probabilities),\n        'AIC Score': aic,\n        'Columns' : len(X_test.columns)\n    }\n    \n    # Plot the sigmoid function and overlay computed z values\n    z = logits  # z values based on the linear combination\n    sigmoid = 1 / (1 + np.exp(-z))\n    \n    # Plot Sigmoid Function\n    plt.figure(figsize=(8, 4))\n    z_values = np.linspace(-7.5, 5, 400)\n    sigmoid_curve = 1 / (1 + np.exp(-z_values))\n    plt.plot(z_values, sigmoid_curve, label='Sigmoid Function Curve')\n    plt.scatter(z, y_vals, color='red', s=50, alpha=0.7, label='Computed Sigmoid Values')\n    plt.title('Sigmoid Function with Computed Values')\n    plt.xlabel('Logits (z)')\n    plt.ylabel('Probability')\n    plt.grid(True)\n    plt.legend()\n    plt.show()\n    \n    # Plot confusion matrix\n    cm = confusion_matrix(y_test, predictions)\n    cm_df = pd.DataFrame(cm, index=['Actual Negative', 'Actual Positive'], columns=['Predicted Negative', 'Predicted Positive'])\n    plt.figure(figsize=(8, 6))\n    sns.heatmap(cm_df, annot=True, fmt='d', cmap='Blues', cbar=False)\n    plt.title('Confusion Matrix')\n    plt.xlabel('Predicted Labels')\n    plt.ylabel('True Labels')\n    plt.show()\n    \n    # Plot ROC curve\n    fpr, tpr, _ = roc_curve(y_test, probabilities)\n    auc = roc_auc_score(y_test, probabilities)\n    plt.figure(figsize=(8, 4))\n    plt.plot(fpr, tpr, color='blue', lw=2, label=\"auc=\"+str(auc))\n    plt.plot([0, 1], [0, 1], color='gray', linestyle='--')\n    plt.title('ROC Curve')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n    \n    return metrics","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.576916Z","iopub.execute_input":"2024-07-31T03:24:31.577387Z","iopub.status.idle":"2024-07-31T03:24:31.601505Z","shell.execute_reply.started":"2024-07-31T03:24:31.577350Z","shell.execute_reply":"2024-07-31T03:24:31.600202Z"},"trusted":true},"execution_count":3191,"outputs":[]},{"cell_type":"code","source":"def model_metrics(sim_len, df_total, feature_cols, diagnosis_col_name):\n    \n    sim_coef_list, X_test, Y_test =  mod_run_simulation(sim_len, df_total, feature_cols, diagnosis_col_name)\n        \n    avg_df, avg_arr= get_avg_coefs_with_df(sim_coef_list)\n        \n    metrics = mod_evaluate_logistic_regression(X_test, Y_test, avg_arr)\n    \n    print('Metrics: ', metrics)\n    \n    return avg_df\n","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.603563Z","iopub.execute_input":"2024-07-31T03:24:31.604047Z","iopub.status.idle":"2024-07-31T03:24:31.619248Z","shell.execute_reply.started":"2024-07-31T03:24:31.604004Z","shell.execute_reply":"2024-07-31T03:24:31.618057Z"},"trusted":true},"execution_count":3192,"outputs":[]},{"cell_type":"code","source":"def get_high_corr(df_name):\n    \n    corr_matrix = df_name.astype(float).corr()\n    corr_matrix.style.background_gradient(cmap='coolwarm')\n    \n    # Select upper triangle of correlation matrix\n    upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(bool))\n\n    # Find index of feature columns with correlation greater than 0.95\n    to_drop = [column for column in upper.columns if any(abs(upper[column]) >=0.8)]\n\n    return to_drop","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.621690Z","iopub.execute_input":"2024-07-31T03:24:31.622299Z","iopub.status.idle":"2024-07-31T03:24:31.632270Z","shell.execute_reply.started":"2024-07-31T03:24:31.622256Z","shell.execute_reply":"2024-07-31T03:24:31.631085Z"},"trusted":true},"execution_count":3193,"outputs":[]},{"cell_type":"code","source":"def get_min_col(std_coef_df): \n    \n    row_to_search = std_coef_df.iloc[-1, :-1]\n    \n    # Find the index of the minimum value in the specified row\n    min_col_index = row_to_search.idxmin()\n    \n    std_coef_df.head()\n    \n    return min_col_index","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.634067Z","iopub.execute_input":"2024-07-31T03:24:31.634419Z","iopub.status.idle":"2024-07-31T03:24:31.652103Z","shell.execute_reply.started":"2024-07-31T03:24:31.634390Z","shell.execute_reply":"2024-07-31T03:24:31.650763Z"},"trusted":true},"execution_count":3194,"outputs":[]},{"cell_type":"code","source":"def best_model_simulation(total_col_len, sim_len, df_total, diagnosis_col_name):\n    \n    avg_coef = pd.DataFrame()\n    df_mod_temp = pd.DataFrame()\n    min_col = 0\n    \n    for i in range(0,total_col_len):\n        \n        if(i == 0):\n            \n            model_metrics(sim_len, df_total, df_total.columns, diagnosis_col_name)\n            \n        elif(i== 1):\n            \n            high_corr_cols = get_high_corr(df_total)\n            \n            df_mod_temp = df_total.drop(to_drop, axis=1)\n            \n            avg_coef = model_metrics(sim_len, df_mod_temp, df_mod_temp.columns, diagnosis_col_name)\n        else:\n            \n            std, std_array = get_std_of_coef(avg_coef)\n        \n            std_coef_df, std_coefs_array = coef_divided_std(std)\n        \n            min_col = get_min_col(std_coef_df)\n        \n            #df_mod_temp.drop(df_mod_temp.columns[min_col],axis=1,inplace=true) # figure how to get index of min\n        \n            #avg_coef = model_metrics(sim_len, df_mod_temp, df_mod_temp.columns, diagnosis_col_name)\n    return min_col\n            ","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.653838Z","iopub.execute_input":"2024-07-31T03:24:31.654338Z","iopub.status.idle":"2024-07-31T03:24:31.664502Z","shell.execute_reply.started":"2024-07-31T03:24:31.654294Z","shell.execute_reply":"2024-07-31T03:24:31.663475Z"},"trusted":true},"execution_count":3195,"outputs":[]},{"cell_type":"code","source":"min_col = best_model_simulation(3, 100, df_cleaned, 'Dx')","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:31.665843Z","iopub.execute_input":"2024-07-31T03:24:31.666185Z","iopub.status.idle":"2024-07-31T03:24:38.700764Z","shell.execute_reply.started":"2024-07-31T03:24:31.666155Z","shell.execute_reply":"2024-07-31T03:24:38.699699Z"},"trusted":true},"execution_count":3196,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x400 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x400 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Metrics:  {'Accuracy': 0.7754491017964071, 'Precision': 0.0963855421686747, 'Recall': 1.0, 'F1 Score': 0.1758241758241758, 'ROC AUC': 0.9735429447852763, 'AIC Score': -432.8800617330902, 'Columns': 33}\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x400 with 1 Axes>","image/png":"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"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x400 with 1 Axes>","image/png":""},"metadata":{}},{"name":"stdout","text":"Metrics:  {'Accuracy': 0.7514970059880239, 'Precision': 0.08791208791208792, 'Recall': 1.0, 'F1 Score': 0.16161616161616163, 'ROC AUC': 0.9432515337423312, 'AIC Score': -409.0283286501542, 'Columns': 28}\n","output_type":"stream"}]},{"cell_type":"code","source":"print(min_col)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:38.702319Z","iopub.execute_input":"2024-07-31T03:24:38.702670Z","iopub.status.idle":"2024-07-31T03:24:38.708035Z","shell.execute_reply.started":"2024-07-31T03:24:38.702639Z","shell.execute_reply":"2024-07-31T03:24:38.707034Z"},"trusted":true},"execution_count":3197,"outputs":[{"name":"stdout","text":"78\n","output_type":"stream"}]},{"cell_type":"code","source":"# Test\n#df_optimized_x.head(668)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:38.709760Z","iopub.execute_input":"2024-07-31T03:24:38.710141Z","iopub.status.idle":"2024-07-31T03:24:38.717661Z","shell.execute_reply.started":"2024-07-31T03:24:38.710097Z","shell.execute_reply":"2024-07-31T03:24:38.716760Z"},"trusted":true},"execution_count":3198,"outputs":[]},{"cell_type":"code","source":"# Test\n#df_optimized_y.head(668)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:38.720922Z","iopub.execute_input":"2024-07-31T03:24:38.721958Z","iopub.status.idle":"2024-07-31T03:24:38.727964Z","shell.execute_reply.started":"2024-07-31T03:24:38.721925Z","shell.execute_reply":"2024-07-31T03:24:38.727015Z"},"trusted":true},"execution_count":3199,"outputs":[]},{"cell_type":"code","source":"# Test\n#df_optimized.head(690)","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:38.729686Z","iopub.execute_input":"2024-07-31T03:24:38.730037Z","iopub.status.idle":"2024-07-31T03:24:38.740082Z","shell.execute_reply.started":"2024-07-31T03:24:38.729997Z","shell.execute_reply":"2024-07-31T03:24:38.739066Z"},"trusted":true},"execution_count":3200,"outputs":[]},{"cell_type":"code","source":"# Test\n#df_optimized[df_optimized['Dx']==1]","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:38.741613Z","iopub.execute_input":"2024-07-31T03:24:38.742064Z","iopub.status.idle":"2024-07-31T03:24:38.752284Z","shell.execute_reply.started":"2024-07-31T03:24:38.742023Z","shell.execute_reply":"2024-07-31T03:24:38.750902Z"},"trusted":true},"execution_count":3201,"outputs":[]},{"cell_type":"code","source":"# # Example usage:\n# results_df, best_combination, best_accuracy, best_aic = finding_optimal_attributes(df_cleaned, 100)\n# print(results_df)\n# print(f\"Best combination: {best_combination}, Accuracy: {best_accuracy}, AIC: {best_aic}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:38.754070Z","iopub.execute_input":"2024-07-31T03:24:38.754467Z","iopub.status.idle":"2024-07-31T03:24:38.768374Z","shell.execute_reply.started":"2024-07-31T03:24:38.754433Z","shell.execute_reply":"2024-07-31T03:24:38.767294Z"},"trusted":true},"execution_count":3202,"outputs":[]},{"cell_type":"code","source":"# sim_len = 100\n# max_cols = 20\n\n# results_df, best_combination, best_accuracy, best_aic = finding_optimal_attributes(df_cleaned, 1, 5)\n# print(results_df)\n# print(f\"Best combination: {best_combination}, Accuracy: {best_accuracy}, AIC: {best_aic}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-31T03:24:38.769746Z","iopub.execute_input":"2024-07-31T03:24:38.770138Z","iopub.status.idle":"2024-07-31T03:24:38.780045Z","shell.execute_reply.started":"2024-07-31T03:24:38.770105Z","shell.execute_reply":"2024-07-31T03:24:38.778971Z"},"trusted":true},"execution_count":3203,"outputs":[]}]}